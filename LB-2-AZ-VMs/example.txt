

/*

variable "DemoRac" {
  
}
variable "var1" {
  
}
locals {
  # Ids for multiple sets of EC2 instances, merged together
  environment = ""
}

resource "azurerm_resource_group" "Rachid" {
  name     = "${var.resource_group}"
  location = "${var.location}"
}

resource "azurerm_virtual_network" "Rachid" {
   name = "${var.virtual_network_name}"
   location = "${azurerm_resource_group.Rachid.location}"
   resource_group_name = "${azurerm_resource_group.Rachid.name}"
   address_space =  ["${var.address_space}"]
}


resource "azurerm_subnet" "Rachid" {
   name = "${var.prefix}.subnet"
   resource_group_name = "${azurerm_resource_group.Rachid.name}"
   virtual_network_name = "${azurerm_virtual_network.Rachid.name}"
   address_prefixes = "${var.subnet_prefix}"
}

resource "azurerm_network_security_group" "Rachid" {

   resource_group_name = "${azurerm_resource_group.Rachid.name}"
   name                      =  "${var.vm-name}-SG-${count.index}"
   location                  = "${var.location}"
   count=3

   security_rule {
    name                       = "HTTP"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "${var.source_network}"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "SSH"
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "${var.source_network}"
    destination_address_prefix = "*"
  }
}

resource "azurerm_network_interface" "Rachid" {
  name                = "${var.vm-name}-IN-${count.index}"
  location            = "${azurerm_resource_group.Rachid.location}"
  resource_group_name = "${azurerm_resource_group.Rachid.name}"
  //tags                = "${var.tags}"
  count               = 3

  ip_configuration {
    name                          = "ip${count.index}"
    subnet_id                     = "${azurerm_subnet.Rachid.id}"
    private_ip_address_allocation = "dynamic"
    public_ip_address_id = azurerm_public_ip.example[count.index].id
  }
  
}
resource "azurerm_public_ip" "example" {
  count = 3
  name                = "acceptanceTestPublicIp1_${count.index}"
  resource_group_name = azurerm_resource_group.Rachid.name
  location            = azurerm_resource_group.Rachid.location
  allocation_method   = "Static"

  tags = {
    environment = "Production"
  }
}
resource "azurerm_network_interface_security_group_association" "Rachid" {
   count=3
    network_interface_id      = azurerm_network_interface.Rachid[count.index].id
    network_security_group_id = azurerm_network_security_group.Rachid[count.index].id
}


# Create virtual machine
resource "azurerm_virtual_machine" "Rachid" {
  count                 = 3
  name                  = "${var.vm-name}-VM-${count.index}"
  location              = "${var.location}"
  resource_group_name   = "${var.resource_group}"
  network_interface_ids = [azurerm_network_interface.Rachid.*.id[count.index]]
  vm_size = "${var.vm_size}"

  storage_os_disk {
    name              = "${var.prefix}-${count.index}"
    caching           = "ReadWrite"
    create_option     = "FromImage"
    managed_disk_type = "Standard_LRS"
  }


  storage_image_reference {
      publisher = "${var.image_publisher}"
      offer     = "${var.image_offer}"
      sku       = "${var.image_sku}"
      version   = "${var.image_version}"
    }
  

  # delete the OS disk automatically when deleting the VM
  delete_os_disk_on_termination = true

  os_profile {
    computer_name  = "${var.hostname}"
    admin_username = "${var.admin_username}"
    admin_password = "${var.admin_password}"
  }

  os_profile_linux_config {
    disable_password_authentication = false

  }
}

# loadbalancer



resource "azurerm_public_ip" "example2" {
  name                = "PublicIPForLB"
  location = "${var.location}"
  resource_group_name = "${var.resource_group}"
  allocation_method   = "Static"
}

resource "azurerm_lb" "myexample" {
  name              = "TestLoadBalancer"
 location = "${var.location}"
  resource_group_name = "${var.resource_group}"
 
  frontend_ip_configuration {
    name                 = "PublicIPAddress"
    public_ip_address_id = azurerm_public_ip.example2.id
  }
}

resource "azurerm_network_interface" "Rachid" {
  
   resource_group_name = "${azurerm_resource_group.Rachid.name}"
   name                      = "${var.prefix}.NI"
   location                  = "${var.location}"


  ip_configuration {
    name                          = "${var.prefix}ipconfig"
    subnet_id                     = "${azurerm_subnet.Rachid.id}"
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = "${azurerm_public_ip.Rachid.id}"
  }

}
# Connect the security group to the network interface
resource "azurerm_network_interface_security_group_association" "Rachid" {
    network_interface_id      = azurerm_network_interface.Rachid.id
    network_security_group_id = azurerm_network_security_group.Rachid.id
}

 resource "azurerm_public_ip" "Rachid" {
    
    resource_group_name = "${azurerm_resource_group.Rachid.name}"
    name                      = "${var.prefix}.publicIP"
    location                  = "${var.location}"
    domain_name_label            = "${var.hostname}"
     allocation_method = "Dynamic"

 }





# Connect the security group to the network interface
resource "azurerm_network_interface_security_group_association" "Rachid" {
    network_interface_id      = azurerm_network_interface.Rachid.id
    network_security_group_id = azurerm_network_security_group.Rachid.id
}

 resource "azurerm_public_ip" "Rachid" {
    
    resource_group_name = "${azurerm_resource_group.Rachid.name}"
    name                      = "${var.prefix}.publicIP"
    location                  = "${var.location}"
    domain_name_label            = "${var.hostname}"
     allocation_method = "Dynamic"

 }

resource "azurerm_virtual_machine" "VM" {
   name                = "${var.hostname}-VM"
  location            = "${var.location}"
   resource_group_name = "${azurerm_resource_group.Rachid.name}"
   network_interface_ids = ["${azurerm_network_interface.Rachid.id}"]
   vm_size = "Standard_B1ls"

   storage_image_reference {
       publisher = "Canonical"
       offer     = "UbuntuServer"
       sku       = "14.04.2-LTS"
       version   = "latest"
   }

   storage_os_disk {
       name          = "myosdisk1"
       managed_disk_type = "Standard_LRS"
       caching       = "ReadWrite"
       create_option = "FromImage"
   }

   storage_data_disk {
       name          = "datadisk0"
       disk_size_gb  = "1023"
       create_option = "empty"
       lun           = 0
   }
 os_profile {
    computer_name  = "${var.hostname}"
    admin_username = "${var.admin_username}"
    admin_password = "${var.admin_password}"
  }

   os_profile_linux_config {
       disable_password_authentication = false
   }
}

# COSMOS DB

resource "azurerm_cosmosdb_account" "acc" {
  name = "${var.cosmos_db_account_name}"
  location = "${azurerm_resource_group.Rachid.location}"
  resource_group_name = "${azurerm_resource_group.Rachid.name}"
  offer_type = "Standard"
  kind = "GlobalDocumentDB"
  enable_automatic_failover = true
  consistency_policy {
    consistency_level = "Session"
  }
  
  geo_location {
    location = "${var.failover_location}"
    failover_priority = 1
  }
  geo_location {
    location = "${var.location}"
    failover_priority = 0
  }
}
resource "azurerm_cosmosdb_sql_database" "db" {
  name = "products"
  resource_group_name = "${azurerm_cosmosdb_account.acc.resource_group_name}"
  account_name = "${azurerm_cosmosdb_account.acc.name}"
}
resource "azurerm_cosmosdb_sql_container" "coll" {
  name = "Clothes"
  resource_group_name = "${azurerm_cosmosdb_account.acc.resource_group_name}"
  account_name = "${azurerm_cosmosdb_account.acc.name}"
  database_name = "${azurerm_cosmosdb_sql_database.db.name}"
  partition_key_path = "/ClothesId"